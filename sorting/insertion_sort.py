def insertion_sort(lst):
    for i in range(1, len(lst)):  # Починаємо з другого елемента масиву
        key = lst[i]  # Зберігаємо поточний елемент як ключ
        j = i - 1  # Починаємо порівнювати з попереднім елементом
        while j >= 0 and key < lst[j]:  # Поки не дійшли до початку масиву і ключ менший за поточний елемент
            lst[j + 1] = lst[j]  # Зсуваємо поточний елемент вправо
            j -= 1  # Переміщаємось на одну позицію вліво
        lst[j + 1] = key  # Вставляємо ключ на правильну позицію
    return lst  # Повертаємо відсортований масив

array = [12, 11, 13, 5, 6, 7]
print(f"Given array is {array}")
print(f"Sorted array is {insertion_sort(array)}")




def insertion_sort_recursive(arr, n):
    if n <= 1:  # Базовий випадок: якщо масив має один або менше елементів, він вже відсортований
        return

    insertion_sort_recursive(arr, n - 1)  # Сортуємо перші n-1 елементів рекурсивно

    key = arr[n - 1]  # Зберігаємо останній елемент як ключ
    j = n - 2  # Починаємо порівнювати з попереднім елементом
    while j >= 0 and arr[j] > key:  # Поки не дійшли до початку масиву і ключ менший за поточний елемент
        arr[j + 1] = arr[j]  # Зсуваємо поточний елемент вправо
        j -= 1  # Переміщаємось на одну позицію вліво
    arr[j + 1] = key  # Вставляємо ключ на правильну позицію
    return arr  # Повертаємо відсортований масив

# Використання рекурсивного сортування вставками
array = [12, 11, 13, 5, 6, 7]
print(f"Given array is {array}")
print(f"Sorted array is {insertion_sort_recursive(array, len(array))}")
